--TPE BD
-- Created by Vertabelo (http://vertabelo.com)
-- Last modification date: 2020-06-12 17:04:22.554

-- tables
-- Table: CATEGORIA
CREATE TABLE TPE_CATEGORIA (
    id_categoria int  NOT NULL,
    descripcion varchar(200)  NOT NULL,
    id_nivel_juego int  NOT NULL,
    CONSTRAINT PK_TPE_CATEGORIA PRIMARY KEY (id_categoria)
);

-- Table: COMENTA
CREATE TABLE TPE_COMENTA (
    id_usuario int  NOT NULL,
    id_juego int  NOT NULL,
    fecha_primer_com timestamp  NOT NULL,
    fecha_ultimo_com timestamp  NULL,
    CONSTRAINT PK_TPE_COMENTA PRIMARY KEY (id_usuario,id_juego)
);

-- Table: COMENTARIO
CREATE TABLE TPE_COMENTARIO (
    id_usuario int  NOT NULL,
    id_juego int  NOT NULL,
    id_comentario int  NOT NULL,
    fecha_comentario timestamp  NOT NULL,
    comentario varchar(200)  NOT NULL,
    CONSTRAINT PK_TPE_COMENTARIO PRIMARY KEY (id_usuario,id_juego,id_comentario)
);

-- Table: JUEGA
CREATE TABLE TPE_JUEGA (
    finalizado boolean  NULL,
    id_usuario int  NOT NULL,
    id_juego int  NOT NULL,
    CONSTRAINT PK_TPE_JUEGA PRIMARY KEY (id_usuario,id_juego)
);

-- Table: JUEGO
CREATE TABLE TPE_JUEGO (
    id_juego int  NOT NULL,
    nombre_juego varchar(100)  NOT NULL,
    descripcion_juego varchar(2048)  NOT NULL,
    id_categoria int  NOT NULL,
    CONSTRAINT PK_TPE_JUEGO PRIMARY KEY (id_juego)
);

-- Table: NIVEL
CREATE TABLE TPE_NIVEL (
    id_nivel_juego int  NOT NULL,
    descripcion varchar(200)  NOT NULL,
    CONSTRAINT PK_TPE_NIVEL PRIMARY KEY (id_nivel_juego)
);

-- Table: RECOMENDACION
CREATE TABLE TPE_RECOMENDACION (
    id_recomendacion int  NOT NULL,
    email_recomendado varchar(30)  NOT NULL,
    id_usuario int  NOT NULL,
    id_juego int  NOT NULL,
    CONSTRAINT PK_TPE_RECOMENDACION PRIMARY KEY (id_recomendacion)
);

-- Table: TIPO_USUARIO
CREATE TABLE TPE_TIPO_USUARIO (
    id_tipo_usuario int  NOT NULL,
    descripcion varchar(30)  NOT NULL,
    CONSTRAINT PK_TPE_NIVEL_USUARIO PRIMARY KEY (id_tipo_usuario)
);

-- Table: USUARIO
CREATE TABLE TPE_USUARIO (
    id_usuario int  NOT NULL,
    apellido varchar(50)  NOT NULL,
    nombre varchar(50)  NOT NULL,
    email varchar(30)  NOT NULL,
    id_tipo_usuario int  NOT NULL,
    password varchar(32)  NOT NULL,
    CONSTRAINT PK_TPE_USUARIO PRIMARY KEY (id_usuario)
);

-- Table: VOTO
CREATE TABLE TPE_VOTO (
    id_voto int  NOT NULL,
    valor_voto int  NOT NULL,
    id_usuario int  NOT NULL,
    id_juego int  NOT NULL,
    CONSTRAINT PK_TPE_VOTO PRIMARY KEY (id_voto)
);

-- foreign keys
-- Reference: COMENTARIO_COMENTA (table: COMENTARIO)
ALTER TABLE TPE_COMENTARIO ADD CONSTRAINT COMENTARIO_COMENTA
    FOREIGN KEY (id_usuario, id_juego)
    REFERENCES TPE_COMENTA (id_usuario, id_juego)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_CATEGORIA_NIVEL (table: CATEGORIA)
ALTER TABLE TPE_CATEGORIA ADD CONSTRAINT FK_CATEGORIA_NIVEL
    FOREIGN KEY (id_nivel_juego)
    REFERENCES TPE_NIVEL (id_nivel_juego)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_COMENTA_JUEGO (table: COMENTA)
ALTER TABLE TPE_COMENTA ADD CONSTRAINT FK_COMENTA_JUEGO
    FOREIGN KEY (id_juego)
    REFERENCES TPE_JUEGO (id_juego)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_COMENTA_USUARIO (table: COMENTA)
ALTER TABLE TPE_COMENTA ADD CONSTRAINT FK_COMENTA_USUARIO
    FOREIGN KEY (id_usuario)
    REFERENCES TPE_USUARIO (id_usuario)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_JUEGA_JUEGO (table: JUEGA)
ALTER TABLE TPE_JUEGA ADD CONSTRAINT FK_JUEGA_JUEGO
    FOREIGN KEY (id_juego)
    REFERENCES TPE_JUEGO (id_juego)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_JUEGA_USUARIO (table: JUEGA)
ALTER TABLE TPE_JUEGA ADD CONSTRAINT FK_JUEGA_USUARIO
    FOREIGN KEY (id_usuario)
    REFERENCES TPE_USUARIO (id_usuario)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_JUEGO_CATEGORIA (table: JUEGO)
ALTER TABLE TPE_JUEGO ADD CONSTRAINT FK_JUEGO_CATEGORIA
    FOREIGN KEY (id_categoria)
    REFERENCES TPE_CATEGORIA (id_categoria)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_RECOMENDACION_JUEGA (table: RECOMENDACION)
ALTER TABLE TPE_RECOMENDACION ADD CONSTRAINT FK_RECOMENDACION_JUEGA
    FOREIGN KEY (id_usuario, id_juego)
    REFERENCES TPE_JUEGA (id_usuario, id_juego)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_USUARIO_NIVEL_USUARIO (table: USUARIO)
ALTER TABLE TPE_USUARIO ADD CONSTRAINT FK_USUARIO_NIVEL_USUARIO
    FOREIGN KEY (id_tipo_usuario)
    REFERENCES TPE_TIPO_USUARIO (id_tipo_usuario)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- Reference: FK_VOTO_JUEGA (table: VOTO)
ALTER TABLE TPE_VOTO ADD CONSTRAINT FK_VOTO_JUEGA
    FOREIGN KEY (id_usuario, id_juego)
    REFERENCES TPE_JUEGA (id_usuario, id_juego)
    NOT DEFERRABLE
    INITIALLY IMMEDIATE
;

-- End of file.

--La fecha del primer comentario tiene que ser anterior a la fecha del último comentario si este no es nulo.

CREATE TRIGGER Control_of_Date BEFORE
    INSERT on TPE_COMENTARIO
    FOR EACH ROW
    WHEN (NEW.comentario <> null)
    execute procedure FN_Date_Message();

CREATE OR REPLACE FUNCTION FN_Date_Message()
    RETURNS TRIGGER AS $$
        declare
        fecha_primer_coment timestamp;
        BEGIN
            SELECT fecha_comentario into fecha_primer_coment
                FROM TPE_COMENTARIO
                WHERE id_comentario = NEW.id_comentario
                AND id_juego = NEW.id_juego;
            IF (fecha_primer_coment > NEW.fecha_comentario) THEN
                raise exception 'La fecha de su ultimo comentario es anterior a su primer comentario';
            END IF;
        return NEW;
        end;
    $$language 'plpgsql';

--Cada usuario sólo puede comentar una vez al día cada juego.
CREATE TRIGGER Control_Date_Day BEFORE
    INSERT on TPE_COMENTA
    FOR EACH ROW
    execute procedure FN_Date_Day();

CREATE OR REPLACE FUNCTION FN_Date_Day()
    RETURNS TRIGGER AS $$
        declare fecha_ult_coment timestamp;
        BEGIN
            SELECT fecha_comentario into fecha_ult_coment
                FROM TPE_COMENTARIO
                where new.id_usuario = id_usuario AND
                new.id_juego = id_juego AND
                (fecha_comentario = NEW.fecha_comentario);
            IF (fecha_ult_coment) THEN
                raise exception 'ya hiciste un comentario en el dia de hoy'
            END IF;
        return NEW;
        end;
    $$language 'plpgsql';

--Un usuario no puede recomendar un juego si no ha votado previamente dicho juego.

CREATE TRIGGER Control_Vote AFTER
    INSERT or UPDATE of id_usuario, id_juego on TPE_RECOMENDACION
    FOR EACH ROW
    execute procedure FN_Date_Day();

CREATE OR REPLACE FUNCTION FN_Control_Vote()
    RETURNS TRIGGER AS $$
        declare usuario int;
        declare juego int;
        BEGIN
            SELECT id_usuario, id_juego into usuario, juego
                FROM TPE_VOTO v
                where new.id_usuario = v.id_usuario;

            IF (usuario = new.id_usuario AND juego = new.id_juego) THEN
                raise exception 'No puedes recomendar sin antes votar el juego';
            END IF;
        end;
    $$language 'plpgsql';

--Un usuario no puede comentar un juego que no ha jugado.

CREATE TRIGGER CONTROL_COMENT_JUEGO BEFORE INSERT
    ON TPE_COMENTARIO
    FOR EACH ROW
    execute procedure FN_CONTROL_COMENT_JUEGO();

CREATE OR REPLACE FUNCTION FN_G03_COMENTAR_JUEGO() RETURNS Trigger AS
$$
DECLARE
    usuario int;
    juego int;
BEGIN
    SELECT id_usuario, id_juego into id_user, id_game
    FROM TPE_JUEGA
    WHERE id_usuario = NEW.id_usuario
      AND id_juego = NEW.id_juego;
    IF (!id_user = NEW.id_usuario
        AND !id_game = NEW.id_juego) THEN
        RAISE EXCEPTION 'No puedes votar un juego que no has jugado';
    END IF;
    RETURN NEW;
END
$$
    LANGUAGE 'plpgsql';